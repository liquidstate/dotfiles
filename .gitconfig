[user]
	name = Bryan Ross
	email = bryan@liquidstate.net

[advice]
    statusHints = false

[alias]
    # Add an alias at the command line
    alias = "!sh -c '[ $# = 2 ] && git config --global alias.\"$1\" \"$2\" && exit 0 || echo \"usage: git alias <new alias> <original command>\" >&2 && exit 1' -"

    # Show all configured aliases
    aliases = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\ \t => \\2/' | sort

    # Be nice
    branches = branch -av
    tags = tag -l
    remotes = remote -v

    # Shortcuts
    co = checkout
    cob = checkout -b
    cam = commit -a -m
    d = diff --color-words

    # Remove a file from git, but leave the actual file in place
    untrack = rm --cached --
    forget = rm --cached --

    # Show the last few updates
    lastchange = log -p --follow -n 3

    # Start a new local repository and perform initial commit
    this = !git init && git add . && git commmit -m \"Initial commit.\"

    # Thin out older metadata within the repository, reduceses filesystem footprint
    trim = !git reflog expire --expire=now --all && git gc --prune=now

    # For when you made that commit a bit too early, amend
    amend = !git log -n 1 --pretty=tformat:%s%n%n%b | git commit -F - --amend

    # Show the current branch name (usefull for shell prompts)
    branchname = !git branch | grep "^*" | awk '{ print $2 }'

    # Which files are receiving the most "love"
    churn = !git log --all -M -C --name-only --format='format:' "$@" | sort | grep -v '^$' | uniq -c | sort | awk 'BEGIN {print "count,file"} {print $1 "," $2}' | sort -r

    # View the log and diff for a commit (previous if no SHA1 provided)
    details = log -n1 -p --format=fuller

    # Save a repo as a tarball
    export = archive -o latest.tar.gz -9 --prefix=latest/

    # Unstage changes from the index
    unstage = reset HEAD --

    # View a pretty git log with branch tree
    g = !git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative

    # Return a list of commit SHA1s
    sha = "!f() { git log $* | grep '^commit ' | cut -f 2 -d ' '; }; f"

    # Remove deleted files
    r = !git ls-files -z --deleted | xargs -0 git rm

    # Update all submodules
    subup = submodule update --init

    # Grab a pull request as a local branch.
    pr = "!f() { \
      [ $# -eq "1" ] && REMOTE=origin PR=$1 || REMOTE=$1 PR=$2; \
      git fetch ${REMOTE} refs/pull/${PR}/head:pr/${PR}; \
    }; f"

    # Other stuff
    st = status -s -u
    rh = reset HEAD
    who = shortlog -s --
    listconf = config --global --list
    diffall = diff HEAD
    scrub = !git reset --hard && git clean -fd
    shorten = "!sh -c 'curl -i http://git.io -F url=$1' -"
    redocommit = reset --soft HEAD^
    short = rev-parse --short

[color]
# ui = true is a superset of all the more specific color options
#  as documented at http://book.git-scm.com/5_customizing_git.html
# When set to always, always use colors in all git commands which are capable of colored output.
# When false, never. When set to true or auto, use colors only when the output is to the terminal.
# When more specific variables of color.* are set, they always take precedence over this setting.
# Defaults to false.
    ui = auto
    # diff = auto
    # status = auto
    # branch = auto

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold

[color "status"]
    added = yellow
    changed = green
    untracked = cyan

[core]
	editor = nano -w

[gui]
    fontdiff = -family Monaco -size 10 -weight normal -slant roman -underline 0 -overstrike 0

[push]
	default = simple

# eg. "git clone gh:username/my-project"
[url "https://github.com"]
    insteadOf = gh:

# eg. "git clone gist:username/7315613
[url "https://gist.github.com"]
    insteadOf = gist:

#[diff]
#    mnemonicprefix = true

